<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="blog.liulin.date/"/>
  <updated>2018-09-06T00:30:57.000Z</updated>
  <id>blog.liulin.date/</id>
  
  <author>
    <name>ll1615</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ssh</title>
    <link href="blog.liulin.date/2018/09/06/ssh/"/>
    <id>blog.liulin.date/2018/09/06/ssh/</id>
    <published>2018-09-06T00:20:41.000Z</published>
    <updated>2018-09-06T00:30:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建-SSH-密钥对"><a href="#创建-SSH-密钥对" class="headerlink" title="创建 SSH 密钥对"></a>创建 SSH 密钥对</h2><p>SSH 密钥对可以让用户无需输入密码即可登录到 SSH 服务器中。由于登录的过程不需要密码，因此可以防止由于密码被拦截、破解造成的账户密码泄露。再加上密码短语(passphrase)的使用，使得 SSH 的安全性更高一层。</p><p>SSH 密钥对总是一把公钥、一把私钥的成对出现；公钥可以自由的添加到远程 SSH 服务器中用来验证用户是否合法；私钥相当于自己的身份认证，需要妥善保存不能泄露。</p><p>SSH 密钥的其使用原理很简单：用户将公钥添加到远程主机中，登录的时候，远程主机会向用户发送一段随即字符串，用户使用自己的私钥加密后，再发送到远程主机。远程主机使用本地存储的公钥进行解密，如果成功，证明用户时可信的，直接允许登录 shell ，不再要求密码。这样就保证了整个登录过程的安全，防止了中间人攻击。</p><h3 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">usage: ssh-keygen [-q] [-b bits] [-t dsa | ecdsa | ed25519 | rsa]</span><br><span class="line">              [-N new_passphrase] [-C comment] [-f output_keyfile]</span><br><span class="line">   ssh-keygen -p [-P old_passphrase] [-N new_passphrase] [-f keyfile]</span><br><span class="line">   ssh-keygen -i [-m key_format] [-f input_keyfile]</span><br><span class="line">   ssh-keygen -e [-m key_format] [-f input_keyfile]</span><br><span class="line">   ssh-keygen -y [-f input_keyfile]</span><br><span class="line">   ssh-keygen -c [-P passphrase] [-C comment] [-f keyfile]</span><br><span class="line">   ssh-keygen -l [-v] [-E fingerprint_hash] [-f input_keyfile]</span><br><span class="line">   ssh-keygen -B [-f input_keyfile]</span><br><span class="line">   ssh-keygen -D pkcs11</span><br><span class="line">   ssh-keygen -F hostname [-f known_hosts_file] [-l]</span><br><span class="line">   ssh-keygen -H [-f known_hosts_file]</span><br><span class="line">   ssh-keygen -R hostname [-f known_hosts_file]</span><br><span class="line">   ssh-keygen -r hostname [-f input_keyfile] [-g]</span><br><span class="line">   ssh-keygen -G output_file [-v] [-b bits] [-M memory] [-S start_point]</span><br><span class="line">   ssh-keygen -T output_file -f input_file [-v] [-a rounds] [-J num_lines]</span><br><span class="line">              [-j start_line] [-K checkpt] [-W generator]</span><br><span class="line">   ssh-keygen -s ca_key -I certificate_identity [-h] [-U]</span><br><span class="line">              [-D pkcs11_provider] [-n principals] [-O option]</span><br><span class="line">              [-V validity_interval] [-z serial_number] file ...</span><br><span class="line">   ssh-keygen -L [-f input_keyfile]</span><br><span class="line">   ssh-keygen -A</span><br><span class="line">   ssh-keygen -k -f krl_file [-u] [-s ca_public] [-z version_number]</span><br><span class="line">              file ...</span><br><span class="line">   ssh-keygen -Q -f krl_file file ...</span><br></pre></td></tr></table></figure><p>其中可使用 -t 指定加密算法，使用 -b 自定生成密钥长度，使用 -C 添加密钥对的说明comment。生成的密钥对默认存储在用户目录下的 .ssh 目录中，私钥默认名称为 id<em><em>*</em> (即 id</em> + 加密算法名称)。还可以使用 -f 指定生成的私钥存储的文件全路径名称；也可以不使用 -f 指定密钥文件路径，在密钥的创建过程中还会提示用户输入密钥文件全路径名称。私钥对应的公钥文件为私钥文件全名称 + .pub。</p><p>上面例子中创建了一对长度为512位的椭圆加密算法(ECDSA)加密的密钥对。创建 SSH 密钥对可选择多种加密算法，例如 RSA 、 DSA 、 ECDSA 等。</p><h2 id="ssh-copy-id"><a href="#ssh-copy-id" class="headerlink" title="ssh-copy-id"></a>ssh-copy-id</h2><p>ssh-copy-id 将key写到远程机器的 ~/ .ssh/authorized_key.文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Usage: /usr/bin/ssh-copy-id [-h|-?|-f|-n] [-i [identity_file]] [-p port] [[-o &lt;ssh -o options&gt;] ...] [user@]hostname</span><br><span class="line">    -f: force mode -- copy keys without trying to check if they are already installed</span><br><span class="line">    -n: dry run    -- no keys are actually copied</span><br><span class="line">    -h|-?: print this help</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  ssh-copy-id -i .ssh/id_rsa.pub  用户名字@192.168.x.xxx</span><br></pre></td></tr></table></figure><h2 id="ssh-config"><a href="#ssh-config" class="headerlink" title="ssh config"></a>ssh config</h2><p>ssh程序可以从以下途径获取配置参数：</p><p>命令行选项<br>用户配置文件 (~/.ssh/config)<br>系统配置文件 (/etc/ssh/ssh_config)<br>配置文件可分为多个配置区段，每个配置区段使用Host来区分。我们可以在命令行中输入不同的host来加载不同的配置段。</p><p>对每一个配置项来说，首次获取的参数值将被采用，因此通用的设置应该放到文件的后面，特定host相关的配置项应放到文件的前面。</p><p>Host<br>Host配置项标识了一个配置区段。</p><p>ssh配置项参数值可以使用通配符：*代表0～n个非空白字符，?代表一个非空白字符，!表示例外通配。</p><p>我们可以在系统配置文件中看到一个匹配所有host的默认配置区段：</p><p>$ cat /etc/ssh/ssh_config | grep ‘^Host’<br>Host *<br>这里有一些默认配置项，我们可以在用户配置文件中覆盖这些默认配置。</p><p>GlobalKnownHostsFile<br>指定一个或多个全局认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为：/etc/ssh/ssh_known_hosts, /etc/ssh/ssh_known_hosts2.</p><p>HostName<br>指定远程主机名，可以直接使用数字IP地址。如果主机名中包含 ‘%h’ ，则实际使用时会被命令行中的主机名替换。</p><p>IdentityFile<br>指定密钥认证使用的私钥文件路径。默认为 ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519 或 ~/.ssh/id_rsa 中的一个。文件名称可以使用以下转义符：</p><p>‘%d’ 本地用户目录<br>‘%u’ 本地用户名称<br>‘%l’ 本地主机名<br>‘%h’ 远程主机名<br>‘%r’ 远程用户名<br>‘%d’ 本地用户目录 ‘%u’ 本地用户名称 ‘%l’ 本地主机名 ‘%h’ 远程主机名 ‘%r’ 远程用户名<br>可以指定多个密钥文件，在连接的过程中会依次尝试这些密钥文件。</p><p>Port<br>指定远程主机端口号，默认为 22 。</p><p>User<br>指定登录用户名。</p><p>UserKnownHostsFile<br>指定一个或多个用户认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为： ~/.ssh/known_hosts, ~/.ssh/known_hosts2.</p><p>还有更多参数的介绍，可以参看用户手册：</p><p>$ man ssh config</p><p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br><span class="line">Host sshtest</span><br><span class="line">    HostName ssh.test.com</span><br><span class="line">    User user</span><br><span class="line">    Port 2200</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_test</span><br><span class="line"></span><br><span class="line">Host ssttest2</span><br><span class="line">    HostName ssh.test2.com</span><br><span class="line">    User user2</span><br><span class="line">    Port 2345</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_test2</span><br></pre></td></tr></table></figure></p><p>参考</p><ul><li><a href="https://blog.csdn.net/liu_qingbo/article/details/78383892" target="_blank" rel="noopener">https://blog.csdn.net/liu_qingbo/article/details/78383892</a></li><li><a href="http://daemon369.github.io/ssh/2015/03/21/using-ssh-config-file" target="_blank" rel="noopener">http://daemon369.github.io/ssh/2015/03/21/using-ssh-config-file</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建-SSH-密钥对&quot;&gt;&lt;a href=&quot;#创建-SSH-密钥对&quot; class=&quot;headerlink&quot; title=&quot;创建 SSH 密钥对&quot;&gt;&lt;/a&gt;创建 SSH 密钥对&lt;/h2&gt;&lt;p&gt;SSH 密钥对可以让用户无需输入密码即可登录到 SSH 服务器中。由于登录的
      
    
    </summary>
    
    
  </entry>
  
</feed>
